@page "/redis-cache"
@using Microsoft.Extensions.Caching.Distributed;
@using RedisCacheTest2.Lib.Cache;
@using RedisCacheTest2.WebUI.Data
@using RedisCacheTest2.Lib.Extensions
@inject WeatherForecastService ForecastService
@inject IRedisCacheMem cache
<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null && string.IsNullOrWhiteSpace(loadLocation))
{
    <p>Click the button to load the forecast</p>
}
else if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="h3 @isCacheData">@loadLocation</div>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private string loadLocation = "";
    private string isCacheData = "";
    private int counter = 1;
    protected override async Task OnInitializedAsync()
    {
        string recordKey = "WeatherForCasts_" + counter;
        forecasts = await cache.GetRecordAsync<WeatherForecast[]>(recordKey);
        if (object.Equals(forecasts, null))
        {
            forecasts = await ForecastService.GetForecastAsync(System.DateOnly.Parse(DateTime.Now.ToShortDateString()));
            loadLocation = $"Loaded from Api at {DateTime.Now}";
            isCacheData = "";
            await cache.SetRecordAsync(recordKey, forecasts);
        }
        else
        {
            loadLocation = $"Loaded from the cache at {DateTime.Now}";
            isCacheData = "text-danger";
        }
    }
}
